<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Next主题汇总</title>
    <url>/20220120/Next%E4%B8%BB%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>Github Pages + Hexo + Next主题</p>
<p>配置心得</p>
<span id="more"></span>

<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul>
<li>常见命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span>      <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment"># 新建页面</span></span><br><span class="line">hexo generate            <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">hexo server              <span class="comment"># 开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy              <span class="comment"># 部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>                <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version             <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缩写命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<ul>
<li>组合命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s -g   <span class="comment"># 生成并本地预览</span></span><br><span class="line">hexo d -g   <span class="comment"># 生成并上传</span></span><br></pre></td></tr></table></figure>

<ul>
<li>写文章</li>
</ul>
<p>我们可以在 hexo 根目录下执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;my-first-blog&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分隔符</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="GitHub-Pages-绑定域名"><a href="#GitHub-Pages-绑定域名" class="headerlink" title="GitHub Pages 绑定域名"></a>GitHub Pages 绑定域名</h1><h2 id="解析DNS"><a href="#解析DNS" class="headerlink" title="解析DNS"></a>解析DNS</h2><p>我采用的是腾讯云下面的poddns</p>
<p><img src="https://download.yumie.xyz/img/image-20220120153537822.png" alt="image-20220120153537822"></p>
<p>配置也相当简单，只需要更新 DNS 配置里的 A 记录，将其指向以下 4 个 IP 地址中的至少一个。</p>
<ul>
<li>185.199.108.153</li>
<li>185.199.109.153</li>
<li>185.199.110.153</li>
<li>185.199.111.153</li>
</ul>
<p>上述设置的解释：</p>
<ul>
<li>设置 A 记录的意思是，当我输入 <code>yumie.xyz</code> 这个域名的时候，访问的是 <code>185.199.108.153</code> 这个地址；</li>
<li>设置 CNAME 的意思是，当我访问 <code>agecspnt.github.io</code> 这个地址的时候，会跳转到 <code>yumie.xyz</code>，之后的过程就和 A 记录相同了，即访问 <code>185.199.108.153</code>。</li>
</ul>
<h2 id="添加-CNAME-文件"><a href="#添加-CNAME-文件" class="headerlink" title="添加 CNAME 文件"></a>添加 CNAME 文件</h2><p>在 Hexo 本地目录中的 source 文件夹里，添加一个命名为 CNAME 的无后缀文件，文件中的填写你的域名。</p>
<p>如果你想让地址栏的域名显示 www 前缀就输入 <code>www.xxxxx.com</code>，否则输入 <code>xxxxx.com</code> 即可。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">www.yumie.xyz</span><br></pre></td></tr></table></figure>

<h2 id="Github-Pages-对自定义域上-Https"><a href="#Github-Pages-对自定义域上-Https" class="headerlink" title="Github Pages 对自定义域上 Https"></a>Github Pages 对自定义域上 Https</h2><p>然后我们在 Github Pages 项目中 Settings 选项卡 Github Pages 选项：在 Custom domain 添加你的自定义域名。</p>
<p>刷新页面 如果能勾选 Enforce HTTPS 即完成。</p>
<p>建议一定要弄个ssl证书来开启HTTPS，要不然之后还会出现图片加载不出来的问题</p>
<p><img src="https://download.yumie.xyz/img/image-20220120154000312.png" alt="image-20220120154000312"></p>
<h1 id="配置-CDN-进行加速"><a href="#配置-CDN-进行加速" class="headerlink" title="配置 CDN 进行加速"></a>配置 CDN 进行加速</h1><p>由于 Github Pages 的服务并不是那么稳定，近期出现多次不能正常部署或访问 Pages 的问题，所以我现在采用了<strong>博客部署在 GitHub Pages 上并且配置 CDN 进行加速</strong>的方法。</p>
<p>国内的 CDN 服务提供商有不少，但是基本都需要备案，因此我用了 Cloudflare 这个国外的 CDN 服务提供商。</p>
<p>配置 CDN 的过程见：</p>
<ul>
<li><a href="https://tding.top/archives/12c6c559.html">Hexo 配置 Cloudflare 免费 CDN</a></li>
</ul>
<h1 id="Hexo-主题NexT"><a href="#Hexo-主题NexT" class="headerlink" title="Hexo 主题NexT"></a>Hexo 主题NexT</h1><p>Hexo 有很多简洁美观的主题，大家可以去 <a href="https://hexo.io/themes/">Hexo-Themes</a> 去选择自己喜欢的主题。</p>
<p>我只用过next这一款主题，下面是我美化过程的一个记录。</p>
<h2 id="根目录结构"><a href="#根目录结构" class="headerlink" title="根目录结构"></a>根目录结构</h2><p><img src="https://download.yumie.xyz/img/image-20220120154451699.png" alt="image-20220120154451699"></p>
<p>这是Hexo的根目录，下面解析一下每个目录是干啥用的：</p>
<ul>
<li>点开头的文件夹：直接无视，这是一些IDE、git配置文件，不用管</li>
<li>node_modules:  Node.js的包存放的地方，一般不用看</li>
<li>public: 用过hexo g命令后生成静态文件的地方</li>
<li>scaffolds：模板文件夹，生成新page或者post时的模板存放目录</li>
<li>source：可以理解为源代码，文章一般都在这里面写</li>
<li>themes：各种主题的配置文件</li>
<li>_config开头的文件：都是主题配置文件，其中__config.yml是全局配置文件</li>
</ul>
<h2 id="themes目录结构"><a href="#themes目录结构" class="headerlink" title="themes目录结构"></a>themes目录结构</h2><p><img src="https://download.yumie.xyz/img/image-20220120155250890.png" alt="image-20220120155250890"></p>
<p>在这个文件夹里你可以看到你已经安装的主题</p>
<p>拿next来举例</p>
<ul>
<li>docs: 一些主题的说明文档</li>
<li>languages：各种语言的配置文件</li>
<li>layout：布局文件，需要经常调整</li>
<li>script：JavaScript文件，一般不用动</li>
<li>source：用来修改样式，经常需要改动</li>
</ul>
<h1 id="配置图床"><a href="#配置图床" class="headerlink" title="配置图床"></a>配置图床</h1><p>图片放到github page上加载很慢，所以我使用七牛云来储存图片</p>
<p>还有一个优点：本地编辑markdown文件也会方便很多！</p>
<p>使用PicGo，在typora里面配置好</p>
<p><img src="https://download.yumie.xyz/img/image-20220120155800342.png" alt="image-20220120155800342"></p>
<p>七牛云的注册教程自行百度</p>
<p>注意七牛云的域名，域名的HTTPS问题</p>
<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><h2 id="大陆特色问题"><a href="#大陆特色问题" class="headerlink" title="大陆特色问题"></a>大陆特色问题</h2><h3 id="npm装包总是装不上？"><a href="#npm装包总是装不上？" class="headerlink" title="npm装包总是装不上？"></a>npm装包总是装不上？</h3><p>安装cnpm，就可以用国内源安装了</p>
<h3 id="git上传总是失败？？"><a href="#git上传总是失败？？" class="headerlink" title="git上传总是失败？？"></a>git上传总是失败？？</h3><p>第一句在git bash cd到博客根目录运行，可以解决10043问题</p>
<p>后两句可以解决open ssl failed之类的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>

<h1 id="NexT主题配置细节"><a href="#NexT主题配置细节" class="headerlink" title="NexT主题配置细节"></a>NexT主题配置细节</h1><h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><h3 id="设置-hexo-的-next-主题"><a href="#设置-hexo-的-next-主题" class="headerlink" title="设置 hexo 的 next 主题"></a>设置 hexo 的 next 主题</h3><p>我们在站点的配置文件<code>_config.yml</code> 中找到 theme 后添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next  # 配置成刚下载的next主题</span><br></pre></td></tr></table></figure>

<h3 id="配置-hexo-网站相关信息"><a href="#配置-hexo-网站相关信息" class="headerlink" title="配置 hexo 网站相关信息"></a>配置 hexo 网站相关信息</h3><p>我们在站点的配置文件<code>_config.yml</code> 中，修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title:          # 网站标题</span><br><span class="line">subtitle:       # 网站副标题</span><br><span class="line">description:    # 描述，介绍网站的</span><br><span class="line">keywords:       # 网站的关键字</span><br><span class="line">author:         # 博主姓名</span><br><span class="line">language: zh-CN # 语言：zh-CN 是简体中文</span><br><span class="line">timezone: UTC   # 时区</span><br></pre></td></tr></table></figure>

<p>注意：博客框架默认的语言是英文，我们需要到 <code>/themes/next/languages</code> 目录下，查看当前 NexT 版本简体中文对照文件的名称是 <code>zh-Hans</code> 还是 <code>zh-CN</code>。这里是 <code>zh-CN</code>。</p>
<h3 id="配置-hexo-中的-about、tag、links菜单"><a href="#配置-hexo-中的-about、tag、links菜单" class="headerlink" title="配置 hexo 中的 about、tag、links菜单"></a>配置 hexo 中的 about、tag、links菜单</h3><p>默认的主题配置文件<code>_config.yml</code> 中，菜单只开启了首页和归档，我们根据需要，可以添加 about、tag、categories、sitemap 等菜单，所以把它们也取消注释。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 菜单设置为 菜单名: /菜单目录 || 菜单图标名字</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  sitemap: /sitemap.xml || sitemap</span><br><span class="line">  commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true   # 显示图标</span><br><span class="line">  badges: true  # 显示统计信息</span><br></pre></td></tr></table></figure>

<p>注：hexo 所有图标均来自 fontawesome，其中 <code>||</code> 后面是你想要设置的图标的名字。</p>
<h3 id="手动生成-hexo-菜单对应文件"><a href="#手动生成-hexo-菜单对应文件" class="headerlink" title="手动生成 hexo 菜单对应文件"></a>手动生成 hexo 菜单对应文件</h3><p>新菜单开启后是没有对应文件的，所以要手动生成 about、tags、categories、404 页面。</p>
<h4 id="新建-about-页面"><a href="#新建-about-页面" class="headerlink" title="新建 about 页面"></a>新建 about 页面</h4><p><code>about</code> 页面一般用来介绍站点信息和博主信息。</p>
<p>我们可以在博客根目录下输入以下命令新建页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>然后你会发现多了一个 <code>hexo/source/about</code> 文件夹，里面有一个 <code>index.md</code> 文件，你可以根据自己的需要在这个 Markdown 文件中写一些内容（同文章一样，用 Markdown 语法）。</p>
<h4 id="新建一个-tags-页面"><a href="#新建一个-tags-页面" class="headerlink" title="新建一个 tags 页面"></a>新建一个 tags 页面</h4><p>同样的，我们可以新建 <code>tags</code> 页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>在 <code>tags</code> 页面文件 <code>hexo/source/tags/index.md</code> 的头部修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-06-29 11:35:42   # 时间随意</span><br><span class="line">type: &quot;tags&quot;                # 类型一定要为tags</span><br><span class="line">comments: false             # 提示这个页面不需要加载评论</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="新建一个-categories-页面"><a href="#新建一个-categories-页面" class="headerlink" title="新建一个 categories 页面"></a>新建一个 categories 页面</h4><p>同样的，我们可以新建 <code>categories</code> 页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>在 <code>categories</code> 页面文件 <code>hexo/source/categories/index.md</code> 的头部修改为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2018-10-15 00:03:57</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h4 id="新建一个-404-页面"><a href="#新建一个-404-页面" class="headerlink" title="新建一个 404 页面"></a>新建一个 404 页面</h4><p>这里我们将 404 替换成腾讯的公益页面。</p>
<p>首先我们在 <code>hexo/source</code> 目录下创建自己的 <code>404.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;返回&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Hexo 博客的基本内容是一些 Markdown 文件，放在 <code>source/_post</code> 文件夹下，每个文件对应一篇文章。除此之外，放在 source 文件夹下的所有开头不是下划线的文件，在 <code>hexo generate</code> 的时候，都会被拷贝到 public 文件夹下。但是，<strong>Hexo 默认会渲染所有的 HTML 和 Markdown 文件</strong>。</p>
</blockquote>
<p>因此我们可以简单地在文件开头加上 <code>layout: false</code> 一行来避免渲染：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">+layout: false</span><br><span class="line">+---</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;head&gt;</span></span><br><span class="line"><span class="code">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="code">        &lt;title&gt;404&lt;/title&gt;</span></span><br><span class="line"><span class="code">    &lt;/head&gt;</span></span><br><span class="line"><span class="code">    &lt;body&gt;</span></span><br><span class="line"><span class="code">        &lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;返回&quot;&gt;&lt;/script&gt; </span></span><br><span class="line"><span class="code">    &lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样我们就完成了 404 页面的创建。</p>
<p>注意：本地测试不出来，发布出来就可以了。</p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="配置-hexo-中-next-主题样式选择"><a href="#配置-hexo-中-next-主题样式选择" class="headerlink" title="配置 hexo 中 next 主题样式选择"></a>配置 hexo 中 next 主题样式选择</h3><p>NexT 一共提供了 4 种首页样式，按照自己喜好选择一个，选择一个其他主题样式后其他的主题前一定要加上注释<code>#</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="头像信息设置"><a href="#头像信息设置" class="headerlink" title="头像信息设置"></a>头像信息设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  url: /images/avatar.jpg  # 设置头像资源的位置</span><br><span class="line">  rounded: true            # 开启圆形头像</span><br><span class="line">  opacity: 1               # 不透明的比例：0就是完全透明</span><br><span class="line">  rotated: false           # 不开启旋转</span><br></pre></td></tr></table></figure>

<h3 id="社交信息和友链配置"><a href="#社交信息和友链配置" class="headerlink" title="社交信息和友链配置"></a>社交信息和友链配置</h3><p>这里和菜单设置格式一样，<code>社交名字: 社交url || 社交图标</code>，图标信息来自 <a href="https://fontawesome.com/v4.7.0/icons">fontawesome</a>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social: </span><br><span class="line">  GitHub: https://github.com/yourname || github</span><br><span class="line">  E-Mail: mailto:yourname@gmail.com || envelope</span><br><span class="line">  Google: https://plus.google.com/yourname || google</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true      # 显示社交图标</span><br><span class="line">  icons_only: false # 只显示图标，不显示文字</span><br></pre></td></tr></table></figure>

<h3 id="更改动画和动画速度"><a href="#更改动画和动画速度" class="headerlink" title="更改动画和动画速度"></a>更改动画和动画速度</h3><p>更改动画比较简单，在主题配置文件里找到motion即可更改，下面是我的方案</p>
<p><img src="https://download.yumie.xyz/img/image-20220120161604662.png" alt="image-20220120161604662"></p>
<p>这里面的效果都可以在<a href="https://theme-next.js.org/animate/%E7%BD%91%E7%AB%99%E4%B8%AD%E9%A2%84%E8%A7%88">https://theme-next.js.org/animate/网站中预览</a></p>
<p>动画速度我查了好久才知道在哪改：</p>
<p>在motion.js (我一直以为它叫animate.js…)</p>
<p><img src="https://download.yumie.xyz/img/image-20220120161905826.png" alt="image-20220120161905826"></p>
<p>在这里面搜索duration，即可定位：</p>
<p><img src="https://download.yumie.xyz/img/image-20220120162022892.png" alt="image-20220120162022892"></p>
<p>我习惯改的快一点，要不然网站会感觉卡卡的</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue框架</title>
    <url>/20220120/Vue%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>Vue框架的基础知识</p>
<span id="more"></span>

<h1 id="什么是vue？"><a href="#什么是vue？" class="headerlink" title="什么是vue？"></a><strong>什么是vue</strong>？</h1><p>是一套构建用户界面的<strong>渐进式</strong>（用到哪一块就用哪一块，不需要全部用上）前端框架，Vue 的核心库只关注视图层</p>
<p><img src="https://download.yumie.xyz/img/image-20220120165314243.png" alt="image-20220120165314243"></p>
<h1 id="对比其他框架-React"><a href="#对比其他框架-React" class="headerlink" title="对比其他框架-React"></a>对比其他框架-React</h1><p>React 和 Vue 有许多相似之处，它们都有使用 Virtual DOM；提供了响应式（Reactive）和组件化（Composable）的视图组件。将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。React 比 Vue 有更丰富的生态系统</p>
<p>都有支持native的方案，React的RN，vue的Wee下</p>
<p>都支持SSR服务端渲染</p>
<p>都支持props进行父子组件间的通信</p>
<p>性能方面：React 和 Vue 在大部分常见场景下都能提供近似的性能。通常 Vue 会有少量优势，因为 Vue 的 Virtual DOM 实现相对更为轻量一些。</p>
<p><strong>不同之处就是：</strong></p>
<ul>
<li>数据绑定方面，vue实现了数据的双向数据绑定，react数据流动是单向的</li>
<li>virtual DOM不一样,vue会跟踪每一个组件的依赖关系,不需要重新渲染整个组件树.而对于React而言,每当应用的状态被改变时,全部组件都会重新渲染,所以react中会需要shouldComponentUpdate这个生命周期函数方法来进行控制</li>
<li>state对象在react应用中不可变的,需要使用setState方法更新状态;在vue中,state对象不是必须的,数据由data属性在vue对象中管理（如果要操作直接this.xxx）</li>
<li>组件写法不一样, React推荐的做法是 JSX , 也就是把HTML和CSS全都写进JavaScript了,即’all in js’; Vue推荐的做法是webpack+vue-loader的单文件组件格式,即html,css,js写在同一个文件</li>
</ul>
<h1 id="对比其他框架-angular"><a href="#对比其他框架-angular" class="headerlink" title="对比其他框架-angular"></a>对比其他框架-angular</h1><p>在性能方面，这两个框架都非常的快，我们也没有足够的实际应用数据来下一个结论。如果你一定想看些数据的话，你可以参考这个第三方跑分。单就这个跑分来看，Vue 似乎比 Angular 要更快一些。</p>
<p>在大小方面，最近的 Angular 版本中在使用了 AOT 和 tree-shaking 技术后使得最终的代码体积减小了许多。但即使如此，一个包含了 vuex + vue-router 的 Vue 项目 (30kb gzipped) 相比使用了这些优化的 Angular CLI 生成的默认项目尺寸 (~130kb) 还是要小的多。</p>
<p>灵活性：Vue 相比于 Angular 更加灵活，Vue 官方提供了构建工具来协助你构建项目，但它并不限制你去如何组织你的应用代码。有人可能喜欢有严格的代码组织规范，但也有开发者喜欢更灵活自由的方式</p>
<h1 id="vue-js的核心特点—响应的数据绑定"><a href="#vue-js的核心特点—响应的数据绑定" class="headerlink" title="vue.js的核心特点—响应的数据绑定"></a><strong>vue.js的核心特点—响应的数据绑定</strong></h1><p>传统的js操作页面：在以前使用js操作页面的时候是这样的，需要操作某个html元素的数据，就的使用js代码获取元素然后在处理业务逻辑</p>
<p><img src="https://download.yumie.xyz/img/image-20220120165535317.png" alt="image-20220120165535317"></p>
<p>响应式数据绑定的方式操作页面，可以直接使用像下面代码那样的写法就可以将数据填充到页面中</p>
<p><img src="https://download.yumie.xyz/img/image-20220120165556815.png" alt="image-20220120165556815"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;app&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Welcome to Your Vue.js App&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="vue-js的核心特点—可组合的视图组件"><a href="#vue-js的核心特点—可组合的视图组件" class="headerlink" title="vue.js的核心特点—可组合的视图组件"></a><strong>vue.js的核心特点—可组合的视图组件</strong></h1><p>一个页面映射为组件树。划分组件可维护、可重用、可测试，也就是一个页面由多个组件组合而成</p>
<p><img src="https://download.yumie.xyz/img/image-20220120165641632.png" alt="image-20220120165641632"></p>
<p>vue中实现组件引入示例</p>
<p>第一步：import导入需要引入的组件文件；</p>
<p>第二步：注册组件；</p>
<p>第三步：在需要引入组件的文件中加上组件标签（这个标签的标签名就是注册的组件名字，多个单词的和这里有xx-xx的形式）</p>
<p>需要注意的是：组件可以嵌套引入，也就是说组件可以引入其他组件</p>
<p>首先创建一个组件，用于被引入的组件，组件名字叫Hello.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Essential Links&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;hello&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>然后在需要引入的组件中，先使用import导入组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Hello from &#x27;./components/Hello&#x27;</span><br></pre></td></tr></table></figure>

<p>然后使用components注册这个组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">    Hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在需要引入组件的文件中加上组件标签（这个标签的标签名就是注册的组件名字，多个单词的和这里有xx-xx的形式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm(含专业版)安装教程</title>
    <url>/20220119/PyCharm(%E5%90%AB%E4%B8%93%E4%B8%9A%E7%89%88)%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>介绍PyCharm的安装方法–小白也能轻松学会！</p>
<span id="more"></span>

<h2 id="社区版和专业版的区别"><a href="#社区版和专业版的区别" class="headerlink" title="社区版和专业版的区别"></a>社区版和专业版的区别</h2><h3 id="功能上的区别："><a href="#功能上的区别：" class="headerlink" title="功能上的区别："></a>功能上的区别：</h3><p>PyCharm 专业版是功能最丰富的，与社区版相比，PyCharm 专业版增加了 Web 开发、Python Web 框架、Python 分析器、远程开发、支持数据库与 SQL 等更多高级功能。</p>
<p>PyCharm 的社区版中没有 Web 开发、Python We 框架、Python 分析器、远程开发、支持数据库与 SQL 等这些功能。</p>
<p>PyCharm 教育版的功能虽然比专业版会少一些，但与社区版相比，更加支持学校的教学工作。</p>
<h3 id="其他区别"><a href="#其他区别" class="headerlink" title="其他区别:"></a>其他区别:</h3><p>PyCharm 的专业版是需要付费购买该软件的激活码才可以进行使用。</p>
<p>PyCharm 的社区版提供给开发者免费使用的。</p>
<p>PyCharm 的教育版只针对师生认证的用户才免费使用。</p>
<h3 id="适用人群不同"><a href="#适用人群不同" class="headerlink" title="适用人群不同"></a>适用人群不同</h3><p>PyCharm 的专业版是适用于一些公司进行专业互联网开发适用，这需要使用公司投入一定资金。</p>
<p>PyCharm 的社区版是提供给编程爱好者使用学术交流的，所以是免费提供的，其功能虽然不够全面，但能够满足日常开发需要。</p>
<p>PyCharm 的教育版则是以公益为目的免费提供给各大学校进行编程教学，发展编程教育事业。</p>
<p><strong>建议初学者选择社区版, 专业研究选择专业版.</strong></p>
<h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p>先下载需要的 Python 版本(官网下载)</p>
<p><a href="https://www.python.org/">https://www.python.org/</a></p>
<p>Python安装教程:</p>
<p> <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1016959856222624">https://www.liaoxuefeng.com/wiki/1016959663602400/1016959856222624</a></p>
<p>下载 PyCharm(官网下载)</p>
<p><a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p>
<p><img src="https://download.yumie.xyz/img/2021090603102472.png"></p>
<p>左边是专业版, 右边是免费版(社区版)</p>
<h2 id="白嫖专业版-可选"><a href="#白嫖专业版-可选" class="headerlink" title="白嫖专业版(可选)"></a>白嫖专业版(可选)</h2><blockquote>
<p><strong>!!!社区版直接跳过这一步</strong></p>
</blockquote>
<p>如果是大学生, 可以在官网上认证, 免费试用一年, 但是时间太短, 我们采用一劳永逸的方法:</p>
<p>安装完专业版, 选择试用, 先随便新建一个项目进入主界面</p>
<p>找到 Settings/Preferences… -&gt; Plugins</p>
<p><img src="https://download.yumie.xyz/img/image-20220119175443234.png" alt="image-20220119175443234"></p>
<p><img src="https://download.yumie.xyz/img/image-20220119175502592.png" alt="image-20220119175502592"></p>
<p><img src="https://download.yumie.xyz/img/image-20220119175511722.png" alt="image-20220119175511722"></p>
<p>手动添加第三方插件仓库地址：<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a></p>
<p>搜索：IDE Eval Reset 插件进行安装</p>
<p>安装成功之后, 首次运行</p>
<p><img src="https://download.yumie.xyz/img/image-20220119175722751.png" alt="image-20220119175722751"></p>
<p><img src="https://download.yumie.xyz/img/image-20220119175754232.png" alt="image-20220119175754232"></p>
<p>勾选 Auto reset before per restart , 勾选之后点击 Reset</p>
<p>接着一路 yes/ok, 重启 PyCharm 过后就可以了</p>
<p>在每次 Pycharm 重启的时候都会自动续期</p>
<p>这样就可以拥有无限的试用时间, 相当于免费了</p>
<h2 id="初次打开-新建项目"><a href="#初次打开-新建项目" class="headerlink" title="初次打开, 新建项目"></a>初次打开, 新建项目</h2><p><img src="https://download.yumie.xyz/img/image-20220119175834654.png" alt="image-20220119175834654"></p>
<p>我们点击 New Project</p>
<p><img src="https://download.yumie.xyz/img/image-20220119175929740.png" alt="image-20220119175929740"></p>
<p>建议不要把代码放在 c 盘, 因为很多人找不到这个位置在哪, 那么放在其他磁盘中就能解决这个问题</p>
<p>其他的不用更改, 因为 PyCharm 会自动更改下面虚拟环境的路径</p>
<p><strong>为什么要用虚拟环境???</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在实际项目开发中，我们通常会根据自己的需求去下载各种相应的框架库，如 Scrapy、Beautiful Soup 等，但是可能每个项目使用的框架库并不一样，或使用框架的版本不一样，这样需要我们根据需求不断的更新或卸载相应的库。直接怼我们的 Python 环境操作会让我们的开发环境和项目造成很多不必要的麻烦，管理也相当混乱。</span><br></pre></td></tr></table></figure>

<p>点击 Create</p>
<p>那么现在项目就创建成功了，勾选 Show tips on startup，不用每次都打开欢迎界面，然后关闭即可。</p>
<p>到现在, 项目已经创建完毕了</p>
<h2 id="设置中文界面"><a href="#设置中文界面" class="headerlink" title="设置中文界面"></a>设置中文界面</h2><p>File &gt; Setting &gt; Plugins &gt; Marketplace</p>
<p>搜索 Chinese</p>
<p><img src="https://download.yumie.xyz/img/image-20220119180021047.png" alt="image-20220119180021047"></p>
<p>安装这个下载量最多的</p>
<p>完事后重启 PyCharm 就 ok 了</p>
<h2 id="下载插件-库速度太慢-换源"><a href="#下载插件-库速度太慢-换源" class="headerlink" title="下载插件/库速度太慢? 换源!"></a>下载插件/库速度太慢? 换源!</h2><p>打开 settings </p>
<p><img src="https://download.yumie.xyz/img/image-20220119180230546.png" alt="image-20220119180230546"></p>
<p><img src="https://download.yumie.xyz/img/image-20220119180244617.png" alt="image-20220119180244617"></p>
<p><img src="https://download.yumie.xyz/img/image-20220119180254596.png" alt="image-20220119180254596"></p>
<p><img src="https://download.yumie.xyz/img/image-20220119180302962.png" alt="image-20220119180302962"></p>
<p>输入清华源 <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> 点击 ok</p>
<p>以后再在国内下载第三方库, 速度就会快很多了</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>公司官网-Vue项目</title>
    <url>/20220120/%E5%85%AC%E5%8F%B8%E5%AE%98%E7%BD%91-Vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>公司网站搭建记录</p>
<span id="more"></span>

<h1 id="目录构成"><a href="#目录构成" class="headerlink" title="目录构成"></a>目录构成</h1><p><img src="https://download.yumie.xyz/img/image-20220120170459159.png" alt="image-20220120170459159"></p>
<ul>
<li>dist：vue编译出来的文件，输出结果</li>
<li>src：source的缩写，这个文件里放的都是源代码</li>
<li>assets：放各种组件，包括css样式、图片、字体、js</li>
<li>components: 放网页的通用模板</li>
<li>router：路由配置文件</li>
<li>view：所有的页面文件</li>
<li>App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录</li>
<li>main.js: 项目的核心文件</li>
<li>static：静态资源目录，如图片、字体等。</li>
</ul>
<h1 id="什么是-vue文件"><a href="#什么是-vue文件" class="headerlink" title="什么是*.vue文件"></a>什么是*.vue文件</h1><p>首先，我们用 vue-cli 脚手架搭建的项目，里面我们已经遇到了很多，如 index.vue 或者 App.vue 这一的文件了。这到底是个什么东西？如果是初次接触 vue 开发，可能之前没有见过这个东西。*.vue 文件，是一个自定义的文件类型，用类似HTML的语法描述一个Vue组件。每个.vue文件包含三种类型的顶级语言块 <template>, <script> 和 <style>。这三个部分分别代表了 html,js,css。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">     &lt;div class= &quot;article_list&quot; &gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li&gt;&lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;Footer&gt;&lt;/Footer&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Header from &#x27;../components/header.vue&#x27;</span><br><span class="line">import Footer from &#x27;../components/footer.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">   components: &#123; Header, Footer &#125;,</span><br><span class="line">   data () &#123;</span><br><span class="line">     return &#123;</span><br><span class="line">       list: []</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   created () &#123;</span><br><span class="line">     this .getData()</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">     getData () &#123;</span><br><span class="line">       this .$api.get( &#x27;topics&#x27; , null , r =&gt; &#123;</span><br><span class="line">         console.log(r)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">   .article_list &#123;margin: auto;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>以上就是一个简单的 *.vue 文件的基本结构。我们一部分一部分的来解释。</p>
<h2 id="template-部分"><a href="#template-部分" class="headerlink" title="template 部分"></a><strong>template 部分</strong></h2><p>以下，我不再称呼它为 *.vue 文件了。改成为 vue 组件。首先，一个 vue 组件，他的 template 则代表它的 html 结构，相信大家可以理解了。但是需要注意的是，我们不是说把代码包裹在 <template></template> 中就可以了，而是必须在里面方置一个 html 标签来包裹所有的代码。 本例子中，我们采用了 <div></div>标签。</p>
<p>大家看到 <Header></Header> 这个代码的时候肯定很奇怪，这是个什么玩意儿。其实，这是一个自定义组件。我们在其他地方写好了一个组件，然后就可以用这种方式引入进来。同样 <Footer></Footer> 也是一个组件。</p>
<h2 id="script-部分"><a href="#script-部分" class="headerlink" title="script 部分"></a><strong>script 部分</strong></h2><p>首先，我们需要两个自定义组件，我们先引用进来。如下格式，比较好理解吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Header from &#x27;../components/header.vue&#x27;</span><br><span class="line">import Footer from &#x27;../components/footer.vue&#x27;</span><br></pre></td></tr></table></figure>

<p>其次，除了引用的文件，我们将所有的代码包裹于如下的代码中间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ``default` `&#123;</span><br><span class="line"> ` `// 这里写你的代码，外面要包起来。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先引入了 Header 和 Footer 这两个组件的源文件，接下来，我们要把引用的组件给申明到 components 里面去。这样，我们就可以在 template 里面使用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">components: &#123; Header, Footer &#125;,</span><br></pre></td></tr></table></figure>

<p>data是我们的数据。我们的演示代码，给了一个 list 的空数组数据。在 template 中，我们可以使用 this.list 来使用我们的数据。这个我们后面的文章中会讲到，这里不去深入，认识它就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">   return &#123;</span><br><span class="line">     list: []</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>created 表示当我们的组件加载完成时，需要执行的内容。比如这里，我们就让组件在加载完成时，执行一个叫 this.getData() 的函数。另外created是vuejs中的勾子函数之一。（具体的勾子函数请参考附录）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">   this .getData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>methods是我们的这个组件的方法，也可以说是函数。比如，上面的代码就表示，我们的组件自定义了一个叫 getData() 的方法函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   getData () &#123;</span><br><span class="line">     this .$api.get( &#x27;topics&#x27; , null , r =&gt; &#123;</span><br><span class="line">       console.log(r)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="style-部分"><a href="#style-部分" class="headerlink" title="style 部分"></a><strong>style 部分</strong></h2><p>这里比较简单，就是针对我们的 template 里内容出现的 html 元素写一些样式。如下，我的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.article_list &#123;margin: auto;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/20220118/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>测试一下    </p>
<span id="more"></span>
<p>代码块测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello,world!&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
